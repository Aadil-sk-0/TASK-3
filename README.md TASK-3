import re
import numpy as np

def preprocess_text(text):
    # Convert text to lowercase
    text = text.lower()
    # Remove punctuation and special characters
    text = re.sub(r'[^a-zA-Z0-9\s]', '', text)
    return text

def levenshtein_distance(s1, s2):
    m, n = len(s1), len(s2)
    dp = np.zeros((m + 1, n + 1))
    
    for i in range(m + 1):
        dp[i][0] = i
    for j in range(n + 1):
        dp[0][j] = j
    
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            cost = 0 if s1[i - 1] == s2[j - 1] else 1
            dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + cost)
    
    return dp[m][n]

def plagiarism_detector(text1, text2, threshold=0.8):
    text1 = preprocess_text(text1)
    text2 = preprocess_text(text2)
    
    distance = levenshtein_distance(text1, text2)
    similarity = 1 - distance / max(len(text1), len(text2))
    
    if similarity >= threshold:
        return True, similarity
    else:
        return False, similarity

# Example usage:
text1 = "The quick brown fox jumps over the lazy dog."
text2 = "The quick brown fox jumps over the lazy dog."
is_plagiarized, similarity = plagiarism_detector(text1, text2)
if is_plagiarized:
    print("Plagiarism detected! Similarity:", similarity)
else:
    print("No plagiarism detected. Similarity:", similarity)
